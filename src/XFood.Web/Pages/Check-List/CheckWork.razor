@page "/checkWork/{ManagerId:int}"
@using XFoodBlazor.Web.Client.Services.CheckListCriteria.SetPoints;
@using XFoodBlazor.Web.Client.Services.Check_List.SetTotalPoints;
@using XFoodBlazor.Web.Client.Services.CheckListCriteria;
@using XFoodBlazor.Web.Client.Services.Check_List
@using XFoodBlazor.Web.Client.Services.Check_List.Create
@using XFoodBlazor.Web.Client.Services.Criterion;
@inject ICheckService CheckService
@inject ICheckListCriteriaService CheckCriteriaService

@if (response != null)
{
    <p>Пиццерия: @response.CheckList.Pizzeria?.Name</p>
    <p>Менеджер: @response.CheckList.Manager?.FirstName @response.CheckList.Manager?.LastName</p>

    <table class="table">
    <thead>
        <tr>
            <th>Раздел</th>
            <th>Что проверить</th>
            <th>MaxPoints</th>
            <th>Оценка</th>
            
        </tr>
    </thead>
    <tbody>
        @foreach (var group in response.CheckList.Criteria.GroupBy(c => c.Criterion.Section))
        {
            var firstCriterion = group.First();
            <tr>
                <td rowspan="@group.Count()">@firstCriterion.Criterion.Section</td>
                <td>@firstCriterion.Criterion.Name</td>
                <td>@firstCriterion.Criterion.MaxPoints</td>
                <td>
                    <input type="number" class="form-control" @bind="firstCriterion.ReceivedPoints" min="0" max="@firstCriterion.Criterion.MaxPoints" />
                </td>
            </tr>
            @foreach (var criterion in group.Skip(1))
            {
                <tr>
                    <td>@criterion.Criterion.Name</td>
                    <td>@criterion.Criterion.MaxPoints</td>
                    <td>
                        <input type="number" class="form-control" @bind="criterion.ReceivedPoints" min="0" max="@criterion.Criterion.MaxPoints" />
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

    <p>Максимальный балл: @MaxPoints</p>
    <p>Общее количество баллов: @TotalPoints</p>
    @if (TotalPoints != 0)
    {
        <p>Общее количество баллов в процентах: @PointProz %</p>
    }
    else
    {
        <p>Общее количество баллов в процентах: 0%</p>
    }
}
else
{
    <p>Ошибка при загрузке данных.</p>
}

<button type="button" class="btn btn-primary" @onclick="SaveScore">Закончить проверку</button>

@code {
    [Parameter]
    public int ManagerId { get; set; }
    CreateCheckListRequest request = new CreateCheckListRequest();
    CreateCheckListResponse response;
    SetPointsRequest setPointsRequest = new SetPointsRequest();
    SetPointsResponse setPointsResponse;
    SetTotalPointsRequest setTotalPointsRequest = new SetTotalPointsRequest();
    SetTotalPointsResponse setTotalPointsResponse;
    double MaxPoints;
    double TotalPoints;
    double PointProz;

    private async Task SaveScore()
    {
        foreach (var criterion in response.CheckList.Criteria)
        {
            setPointsRequest.Id = criterion.Id;
            setPointsRequest.ReceivedPoints = criterion.ReceivedPoints;
            setPointsResponse = await CheckCriteriaService.SetPoints(setPointsRequest);
        }
        UpdatePoints();
    }

    protected override async Task OnInitializedAsync()
    {
        request.ManagerId = ManagerId;
        response = await CheckService.Create(request);
        UpdatePoints();
    }

    private async void UpdatePoints()
    {
        MaxPoints = response.CheckList.Criteria
            .Where(c => c.Criterion.Section != "Критический фактор" && c.Criterion.Section != "Wow Фактор")
            .Sum(c => c.Criterion.MaxPoints);
        TotalPoints = response.CheckList.Criteria.Sum(c => c.ReceivedPoints);
        PointProz = TotalPoints / MaxPoints * 100;
        setTotalPointsRequest.TotalPoints = response.CheckList.Criteria.Sum(c => c.ReceivedPoints);;
        setTotalPointsRequest.EndCheck = DateTime.UtcNow;
        setTotalPointsRequest.Id = response.CheckList.Id;
        setTotalPointsResponse = await CheckService.SetTotalPoints(setTotalPointsRequest);
    }
}