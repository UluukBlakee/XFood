@page "/pizzerias/create"
@using XFoodBlazor.Web.Client.Services.Pizzeria.Create
@using XFoodBlazor.Web.Client.Services.Pizzeria
@inject IPizzeriaService PizzeriaService
@inject NavigationManager NavigationManager

<h1>Добавить пиццерию</h1>

@if (_showErrors)
{
    <div class="alert alert-danger" role="alert">
        <p>@_errors</p>
    </div>
}

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Новая пиццерия</h5>
        <EditForm Model="_pizzeriaModel" OnValidSubmit="HandleCreatePizzeria">
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <div class="form-group">
                <label for="name">Навзвание</label>
                <InputText Id="name" class="form-control" @bind-Value="_pizzeriaModel.Name"/>
                <ValidationMessage For="@(() => _pizzeriaModel.Name)"/>
            </div>
            <div class="form-group">
                <label for="region">Регион</label>
                <InputText Id="region" type="text" class="form-control" @bind-Value="_pizzeriaModel.Region"/>
                <ValidationMessage For="@(() => _pizzeriaModel.Region)"/>
            </div>
            <button type="submit" class="btn btn-primary">Добавить</button>
        </EditForm>
    </div>
</div>

@code {

    private readonly CreatePizzeriaRequest _pizzeriaModel = new();
    private bool _showErrors;
    private string? _errors;

    private async Task HandleCreatePizzeria()
    {
        _showErrors = false;

        var result = await PizzeriaService.CreatePizzeria(_pizzeriaModel);

        if (result.IsSuccess)
        {
            NavigationManager.NavigateTo("/pizzerias");
        }
        else
        {
            _errors = result.Errors;
            _showErrors = true;
        }
    }

}