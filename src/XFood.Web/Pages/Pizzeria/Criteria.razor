@page "/pizzeria/criteria/{PizzeriaId:int}"
@using XFoodBlazor.Web.Client.Services.Criterion;
@using XFoodBlazor.Web.Client.Services.Criterion.Create;
@using XFoodBlazor.Web.Client.Services.Criterion.Delete;
@using XFoodBlazor.Web.Client.Services.Criterion.Update;
@using XFoodBlazor.Web.Client.Services.Pizzeria
@using XFoodBlazor.Web.Client.Services.Pizzeria.GetPizzeria
@inject IPizzeriaService PizzeriaService
@inject ICriterionService CriterionService

@if (response != null)
{
    <div class="d-flex justify-content-between align-items-center mb-3">
        <p><span class="oi oi-list-rich" aria-hidden="true"></span> Пиццерия: @response.Pizzeria?.Name</p>
        <button class="btn btn-sm btn-success" @onclick="AddCriterion">
            <span class="oi oi-plus" aria-hidden="true"></span>   Добавить новый критерий
        </button>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Раздел</th>
                <th>Что проверить</th>
                <th>MaxPoints</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var group in response.Pizzeria.Criteria.GroupBy(c => c.Section))
            {
                var firstCriterion = group.First();
                <tr>
                    <td rowspan="@group.Count()">@firstCriterion.Section</td>
                    <td>
                        @if (firstCriterion != editedCriterion)
                        {
                            @firstCriterion.Name
                        }
                        else
                        {
                            <textarea @bind="editedCriterion.Name" class="form-control" rows="2"></textarea>
                        }
                    </td>
                    <td>
                        @if (firstCriterion != editedCriterion)
                        {
                            @firstCriterion.MaxPoints
                        }
                        else
                        {
                            <input @bind="editedCriterion.MaxPoints" class="form-control" />
                        }
                    </td>
                    <td>
                        @if (firstCriterion != editedCriterion)
                        {
                            <button class="btn btn-sm btn-primary" @onclick="@(async () => await EditCriterion(firstCriterion))">
                                <span class="oi oi-pencil" aria-hidden="true"></span>
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-sm btn-success" @onclick="@(async () => await SaveEditedCriterion(firstCriterion))">
                                <span class="oi oi-check" aria-hidden="true"></span>
                            </button>
                        }
                        <button class="btn btn-sm btn-danger" @onclick="@(async () => await DeleteCriterion(firstCriterion))">
                            <span class="oi oi-trash" aria-hidden="true"></span>
                        </button>
                    </td>
                </tr>
                @foreach (var criterion in group.Skip(1))
                {
                    <tr>
                        <td>
                            @if (criterion != editedCriterion)
                            {
                                @criterion.Name
                            }
                            else
                            {
                                <textarea @bind="editedCriterion.Name" class="form-control" rows="2"></textarea>
                            }
                        </td>
                        <td>@criterion.MaxPoints</td>
                        <td>
                            @if (criterion != editedCriterion)
                            {
                                <button class="btn btn-sm btn-primary" @onclick="@(async () => await EditCriterion(criterion))">
                                    <span class="oi oi-pencil" aria-hidden="true"></span>
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-sm btn-success" @onclick="@(async () => await SaveEditedCriterion(criterion))">
                                    <span class="oi oi-check" aria-hidden="true"></span>
                                </button>
                            }
                            <button class="btn btn-sm btn-danger" @onclick="@(async () => await DeleteCriterion(criterion))">
                                <span class="oi oi-trash" aria-hidden="true"></span>
                            </button>
                        </td>
                    </tr>
                }
            }

        </tbody>
    </table>

    <p><span class="oi oi-list-rich" aria-hidden="true"></span> Максимальный балл: @MaxPoints</p>
}
else
{
    <p><span class="oi oi-warning" aria-hidden="true"></span> Ошибка при загрузке данных.</p>
}

@code {
    [Parameter]
    public int PizzeriaId { get; set; }
    double MaxPoints;
    GetPizzeriaRequest request = new GetPizzeriaRequest();
    GetPizzeriaResponse response;
    CreateCriterionRequest createRequest = new CreateCriterionRequest();
    CreateCriterionResponse createResponse;
    DeleteCriterionRequest deleteRequest = new DeleteCriterionRequest();
    DeleteCriterionResponse deleteResponse;
    UpdateCriterionRequest updateRequest = new UpdateCriterionRequest();
    UpdateCriterionResponse updateResponse;

    private CriterionView editedCriterion;

    protected override async Task OnInitializedAsync()
    {
        request.Id = PizzeriaId;
        response = await PizzeriaService.GetPizzeria(request);
        UpdateTotalPoints();
    }

    private async void UpdateTotalPoints()
    {
        MaxPoints = response.Pizzeria.Criteria
            .Where(c => c.Section != "Критический фактор" && c.Section != "Wow Фактор")
            .Sum(c => c.MaxPoints);
    }

    private async Task EditCriterion(CriterionView criterion)
    {
        editedCriterion = criterion;
    }

    private async Task SaveEditedCriterion(CriterionView criterion)
    {
        updateRequest.Id = criterion.Id;
        updateRequest.Name = criterion.Name;
        updateRequest.MaxPoints = criterion.MaxPoints;
        updateRequest.Section = criterion.Section;
        updateResponse = await CriterionService.Update(updateRequest);
        editedCriterion = null;
        OnInitializedAsync();
    }

    private async Task DeleteCriterion(CriterionView criterion)
    {
        deleteRequest.Id = criterion.Id;
        deleteResponse = await CriterionService.Delete(deleteRequest);
        OnInitializedAsync();
    }

    private void AddCriterion()
    {
        // Логика добавления нового критерия
    }
}
